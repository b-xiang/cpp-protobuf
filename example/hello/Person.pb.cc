// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Person.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Person.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Address_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Address_reflection_ = NULL;
const ::google::protobuf::Descriptor* Person_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Person_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Person_MO_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Person_2eproto() {
  protobuf_AddDesc_Person_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Person.proto");
  GOOGLE_CHECK(file != NULL);
  Address_descriptor_ = file->message_type(0);
  static const int Address_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, streat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, room_),
  };
  Address_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Address_descriptor_,
      Address::default_instance_,
      Address_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Address));
  Person_descriptor_ = file->message_type(1);
  static const int Person_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, salary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, haschild_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, ii32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, ii64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, i32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, i64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, ii_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, one_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, aint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, afloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, adouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, astring_),
  };
  Person_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Person_descriptor_,
      Person::default_instance_,
      Person_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Person));
  Person_MO_descriptor_ = Person_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Person_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Address_descriptor_, &Address::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Person_descriptor_, &Person::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Person_2eproto() {
  delete Address::default_instance_;
  delete Address_reflection_;
  delete Person::default_instance_;
  delete Person_reflection_;
}

void protobuf_AddDesc_Person_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Person.proto\"\'\n\007Address\022\016\n\006streat\030\001 \002("
    "\t\022\014\n\004room\030\002 \002(\t\"\272\002\n\006Person\022\n\n\002id\030\001 \002(\005\022\016"
    "\n\006salary\030\005 \001(\002\022\013\n\003age\030\004 \001(\001\022\014\n\004name\030\002 \001("
    "\t\022\017\n\007friends\030\003 \003(\005\022\020\n\010haschild\030\006 \002(\010\022\014\n\004"
    "ii32\030\t \002(\r\022\014\n\004ii64\030\n \002(\004\022\013\n\003i32\030\r \002(\005\022\013\n"
    "\003i64\030\016 \002(\003\022\026\n\002ii\030\020 \002(\0162\n.Person.MO\022\025\n\003On"
    "e\030\021 \001(\0132\010.Address\022\031\n\007address\030\017 \003(\0132\010.Add"
    "ress\022\014\n\004aInt\030\022 \003(\005\022\016\n\006aFloat\030\023 \003(\002\022\017\n\007aD"
    "ouble\030\024 \003(\001\022\017\n\007aString\030\025 \003(\t\"\026\n\002MO\022\006\n\002OK"
    "\020\000\022\010\n\004FAIL\020\001", 372);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Person.proto", &protobuf_RegisterTypes);
  Address::default_instance_ = new Address();
  Person::default_instance_ = new Person();
  Address::default_instance_->InitAsDefaultInstance();
  Person::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Person_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Person_2eproto {
  StaticDescriptorInitializer_Person_2eproto() {
    protobuf_AddDesc_Person_2eproto();
  }
} static_descriptor_initializer_Person_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Address::kStreatFieldNumber;
const int Address::kRoomFieldNumber;
#endif  // !_MSC_VER

Address::Address()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Address::InitAsDefaultInstance() {
}

Address::Address(const Address& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Address::SharedCtor() {
  _cached_size_ = 0;
  streat_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  room_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Address::~Address() {
  SharedDtor();
}

void Address::SharedDtor() {
  if (streat_ != &::google::protobuf::internal::kEmptyString) {
    delete streat_;
  }
  if (room_ != &::google::protobuf::internal::kEmptyString) {
    delete room_;
  }
  if (this != default_instance_) {
  }
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Address_descriptor_;
}

const Address& Address::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Person_2eproto();
  return *default_instance_;
}

Address* Address::default_instance_ = NULL;

Address* Address::New() const {
  return new Address;
}

void Address::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_streat()) {
      if (streat_ != &::google::protobuf::internal::kEmptyString) {
        streat_->clear();
      }
    }
    if (has_room()) {
      if (room_ != &::google::protobuf::internal::kEmptyString) {
        room_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string streat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_streat()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->streat().data(), this->streat().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_room;
        break;
      }

      // required string room = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->room().data(), this->room().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string streat = 1;
  if (has_streat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->streat().data(), this->streat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->streat(), output);
  }

  // required string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->room(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Address::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string streat = 1;
  if (has_streat()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->streat().data(), this->streat().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->streat(), target);
  }

  // required string room = 2;
  if (has_room()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->room().data(), this->room().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Address::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string streat = 1;
    if (has_streat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->streat());
    }

    // required string room = 2;
    if (has_room()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->room());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Address* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Address*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streat()) {
      set_streat(from.streat());
    }
    if (from.has_room()) {
      set_room(from.room());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Address::Swap(Address* other) {
  if (other != this) {
    std::swap(streat_, other->streat_);
    std::swap(room_, other->room_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Address_descriptor_;
  metadata.reflection = Address_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Person_MO_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Person_MO_descriptor_;
}
bool Person_MO_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Person_MO Person::OK;
const Person_MO Person::FAIL;
const Person_MO Person::MO_MIN;
const Person_MO Person::MO_MAX;
const int Person::MO_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Person::kIdFieldNumber;
const int Person::kSalaryFieldNumber;
const int Person::kAgeFieldNumber;
const int Person::kNameFieldNumber;
const int Person::kFriendsFieldNumber;
const int Person::kHaschildFieldNumber;
const int Person::kIi32FieldNumber;
const int Person::kIi64FieldNumber;
const int Person::kI32FieldNumber;
const int Person::kI64FieldNumber;
const int Person::kIiFieldNumber;
const int Person::kOneFieldNumber;
const int Person::kAddressFieldNumber;
const int Person::kAIntFieldNumber;
const int Person::kAFloatFieldNumber;
const int Person::kADoubleFieldNumber;
const int Person::kAStringFieldNumber;
#endif  // !_MSC_VER

Person::Person()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Person::InitAsDefaultInstance() {
  one_ = const_cast< ::Address*>(&::Address::default_instance());
}

Person::Person(const Person& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Person::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  salary_ = 0;
  age_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  haschild_ = false;
  ii32_ = 0u;
  ii64_ = GOOGLE_ULONGLONG(0);
  i32_ = 0;
  i64_ = GOOGLE_LONGLONG(0);
  ii_ = 0;
  one_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Person::~Person() {
  SharedDtor();
}

void Person::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete one_;
  }
}

void Person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Person::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Person_descriptor_;
}

const Person& Person::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Person_2eproto();
  return *default_instance_;
}

Person* Person::default_instance_ = NULL;

Person* Person::New() const {
  return new Person;
}

void Person::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    salary_ = 0;
    age_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    haschild_ = false;
    ii32_ = 0u;
    ii64_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    i32_ = 0;
    i64_ = GOOGLE_LONGLONG(0);
    ii_ = 0;
    if (has_one()) {
      if (one_ != NULL) one_->::Address::Clear();
    }
  }
  friends_.Clear();
  address_.Clear();
  aint_.Clear();
  afloat_.Clear();
  adouble_.Clear();
  astring_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friends;
        break;
      }

      // repeated int32 friends = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friends:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_friends())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_friends())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friends;
        if (input->ExpectTag(33)) goto parse_age;
        break;
      }

      // optional double age = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_salary;
        break;
      }

      // optional float salary = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_salary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &salary_)));
          set_has_salary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_haschild;
        break;
      }

      // required bool haschild = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_haschild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haschild_)));
          set_has_haschild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ii32;
        break;
      }

      // required uint32 ii32 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ii32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ii32_)));
          set_has_ii32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ii64;
        break;
      }

      // required uint64 ii64 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ii64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ii64_)));
          set_has_ii64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_i32;
        break;
      }

      // required int32 i32 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &i32_)));
          set_has_i32();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_i64;
        break;
      }

      // required int64 i64 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i64_)));
          set_has_i64();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_address;
        break;
      }

      // repeated .Address address = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_address;
        if (input->ExpectTag(128)) goto parse_ii;
        break;
      }

      // required .Person.MO ii = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ii:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Person_MO_IsValid(value)) {
            set_ii(static_cast< ::Person_MO >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_One;
        break;
      }

      // optional .Address One = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_One:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_one()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_aInt;
        break;
      }

      // repeated int32 aInt = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aInt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_aint())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_aint())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_aInt;
        if (input->ExpectTag(157)) goto parse_aFloat;
        break;
      }

      // repeated float aFloat = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_aFloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 157, input, this->mutable_afloat())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_afloat())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_aFloat;
        if (input->ExpectTag(161)) goto parse_aDouble;
        break;
      }

      // repeated double aDouble = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_aDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 2, 161, input, this->mutable_adouble())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_adouble())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_aDouble;
        if (input->ExpectTag(170)) goto parse_aString;
        break;
      }

      // repeated string aString = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_astring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->astring(this->astring_size() - 1).data(),
            this->astring(this->astring_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_aString;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // repeated int32 friends = 3;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->friends(i), output);
  }

  // optional double age = 4;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->age(), output);
  }

  // optional float salary = 5;
  if (has_salary()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->salary(), output);
  }

  // required bool haschild = 6;
  if (has_haschild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->haschild(), output);
  }

  // required uint32 ii32 = 9;
  if (has_ii32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ii32(), output);
  }

  // required uint64 ii64 = 10;
  if (has_ii64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->ii64(), output);
  }

  // required int32 i32 = 13;
  if (has_i32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->i32(), output);
  }

  // required int64 i64 = 14;
  if (has_i64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->i64(), output);
  }

  // repeated .Address address = 15;
  for (int i = 0; i < this->address_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->address(i), output);
  }

  // required .Person.MO ii = 16;
  if (has_ii()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->ii(), output);
  }

  // optional .Address One = 17;
  if (has_one()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->one(), output);
  }

  // repeated int32 aInt = 18;
  for (int i = 0; i < this->aint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->aint(i), output);
  }

  // repeated float aFloat = 19;
  for (int i = 0; i < this->afloat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      19, this->afloat(i), output);
  }

  // repeated double aDouble = 20;
  for (int i = 0; i < this->adouble_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      20, this->adouble(i), output);
  }

  // repeated string aString = 21;
  for (int i = 0; i < this->astring_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->astring(i).data(), this->astring(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->astring(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Person::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated int32 friends = 3;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->friends(i), target);
  }

  // optional double age = 4;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->age(), target);
  }

  // optional float salary = 5;
  if (has_salary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->salary(), target);
  }

  // required bool haschild = 6;
  if (has_haschild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->haschild(), target);
  }

  // required uint32 ii32 = 9;
  if (has_ii32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ii32(), target);
  }

  // required uint64 ii64 = 10;
  if (has_ii64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->ii64(), target);
  }

  // required int32 i32 = 13;
  if (has_i32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->i32(), target);
  }

  // required int64 i64 = 14;
  if (has_i64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->i64(), target);
  }

  // repeated .Address address = 15;
  for (int i = 0; i < this->address_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->address(i), target);
  }

  // required .Person.MO ii = 16;
  if (has_ii()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->ii(), target);
  }

  // optional .Address One = 17;
  if (has_one()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->one(), target);
  }

  // repeated int32 aInt = 18;
  for (int i = 0; i < this->aint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->aint(i), target);
  }

  // repeated float aFloat = 19;
  for (int i = 0; i < this->afloat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(19, this->afloat(i), target);
  }

  // repeated double aDouble = 20;
  for (int i = 0; i < this->adouble_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(20, this->adouble(i), target);
  }

  // repeated string aString = 21;
  for (int i = 0; i < this->astring_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->astring(i).data(), this->astring(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(21, this->astring(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Person::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional float salary = 5;
    if (has_salary()) {
      total_size += 1 + 4;
    }

    // optional double age = 4;
    if (has_age()) {
      total_size += 1 + 8;
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required bool haschild = 6;
    if (has_haschild()) {
      total_size += 1 + 1;
    }

    // required uint32 ii32 = 9;
    if (has_ii32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ii32());
    }

    // required uint64 ii64 = 10;
    if (has_ii64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ii64());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 i32 = 13;
    if (has_i32()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->i32());
    }

    // required int64 i64 = 14;
    if (has_i64()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->i64());
    }

    // required .Person.MO ii = 16;
    if (has_ii()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ii());
    }

    // optional .Address One = 17;
    if (has_one()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->one());
    }

  }
  // repeated int32 friends = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->friends_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->friends(i));
    }
    total_size += 1 * this->friends_size() + data_size;
  }

  // repeated .Address address = 15;
  total_size += 1 * this->address_size();
  for (int i = 0; i < this->address_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->address(i));
  }

  // repeated int32 aInt = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->aint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->aint(i));
    }
    total_size += 2 * this->aint_size() + data_size;
  }

  // repeated float aFloat = 19;
  {
    int data_size = 0;
    data_size = 4 * this->afloat_size();
    total_size += 2 * this->afloat_size() + data_size;
  }

  // repeated double aDouble = 20;
  {
    int data_size = 0;
    data_size = 8 * this->adouble_size();
    total_size += 2 * this->adouble_size() + data_size;
  }

  // repeated string aString = 21;
  total_size += 2 * this->astring_size();
  for (int i = 0; i < this->astring_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->astring(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Person::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Person* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Person*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Person::MergeFrom(const Person& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  address_.MergeFrom(from.address_);
  aint_.MergeFrom(from.aint_);
  afloat_.MergeFrom(from.afloat_);
  adouble_.MergeFrom(from.adouble_);
  astring_.MergeFrom(from.astring_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_salary()) {
      set_salary(from.salary());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_haschild()) {
      set_haschild(from.haschild());
    }
    if (from.has_ii32()) {
      set_ii32(from.ii32());
    }
    if (from.has_ii64()) {
      set_ii64(from.ii64());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_i32()) {
      set_i32(from.i32());
    }
    if (from.has_i64()) {
      set_i64(from.i64());
    }
    if (from.has_ii()) {
      set_ii(from.ii());
    }
    if (from.has_one()) {
      mutable_one()->::Address::MergeFrom(from.one());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Person::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person::CopyFrom(const Person& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007e1) != 0x000007e1) return false;

  if (has_one()) {
    if (!this->one().IsInitialized()) return false;
  }
  for (int i = 0; i < address_size(); i++) {
    if (!this->address(i).IsInitialized()) return false;
  }
  return true;
}

void Person::Swap(Person* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(salary_, other->salary_);
    std::swap(age_, other->age_);
    std::swap(name_, other->name_);
    friends_.Swap(&other->friends_);
    std::swap(haschild_, other->haschild_);
    std::swap(ii32_, other->ii32_);
    std::swap(ii64_, other->ii64_);
    std::swap(i32_, other->i32_);
    std::swap(i64_, other->i64_);
    std::swap(ii_, other->ii_);
    std::swap(one_, other->one_);
    address_.Swap(&other->address_);
    aint_.Swap(&other->aint_);
    afloat_.Swap(&other->afloat_);
    adouble_.Swap(&other->adouble_);
    astring_.Swap(&other->astring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Person::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Person_descriptor_;
  metadata.reflection = Person_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
